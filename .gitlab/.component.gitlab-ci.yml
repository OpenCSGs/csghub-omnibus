spec:
  inputs:
    component_name:
      description: "Name of the component to build"
      default: 'default'
    tag:
      description: "Runner tags"
      default: 'ubuntu_22.04'
---
variables:
  # Docker
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""

build-$[[ inputs.component_name ]]:
  stage: build
  image: ${REGISTRY}/docker:27.3
  before_script:
    - sed -i 's|http[s]*://dl-cdn.alpinelinux.org|https://mirrors.tuna.tsinghua.edu.cn|g' /etc/apk/repositories
    - apk update && apk add jq bash
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker run --privileged --rm ${REGISTRY}/tonistiigi/binfmt --install all
  services:
    - name: ${REGISTRY}/docker:27.3-dind
      command: [ "--feature=containerd-snapshotter", "--experimental" ]
      alias: docker
  script:
    - |
      cat <<'EOF' | bash -s
      set -e 
      # Components
      VERSION_MANIFESTS="dockerfiles/$[[ inputs.component_name ]]/version-manifests.json"
      
      # Defining basic variables
      COMPONENT_NAME_UPPER=$(cat ${VERSION_MANIFESTS} | jq -r '.components[0].name' | tr '[:lower:]' '[:upper:]' | tr '-' '_')
      COMPONENT_VERSION=$(cat ${VERSION_MANIFESTS} | jq -r '.components[0].version')
      echo "Building $COMPONENT_NAME_UPPER version $COMPONENT_VERSION"
      
      # Introducing user-defined variables
      build_args=( "--build-arg" "REGISTRY=${REGISTRY}" )
      while IFS="=" read -r key value; do
        safe_key=$(echo "$key" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
      
        # Allow User specify environments overwrite
        final_value="${!safe_key:-$value}"
      
        build_args+=( "--build-arg" "${safe_key}=${final_value}" )
      
        echo "Prepared build arg: ${safe_key}=${final_value}"
      done < <(jq -r '.components[0].environments | to_entries[] | "\(.key)=\(.value)"' "${VERSION_MANIFESTS}")
      
      OS_TAG=$(basename $OS_RELEASE | sed 's/:/_/g')
      # Building docker images
      docker buildx build \
        --provenance false \
        --platform ${BUILD_PLATFORMS} \
        ${build_args[@]} \
        -t "$CI_REGISTRY_IMAGE/omnibus-$[[ inputs.component_name ]]:${COMPONENT_VERSION}-${OS_TAG}" \
        -f "dockerfiles/$[[ inputs.component_name ]]/Dockerfile_$[[ inputs.component_name ]]" \
        --push .
      EOF
  interruptible: true
  retry: 2
  tags:
    - $[[ inputs.tag ]]

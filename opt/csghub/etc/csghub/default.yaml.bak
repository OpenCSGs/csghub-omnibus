# This is the csghub configuration file. All configurations are changed here.
csghub:
  ## The external URL for accessing CSGHub
  external_url: "http://csghub.example.com"

# CSGHub-Server
server:
  listen_port: 8080
  saas: false
  instance_id: ""
  enable_swagger: false
  enable_https: false
  api_token: ""
  docs_host: "http://127.0.0.1:6636"
  log:
    dir: "/var/log/csghub/server"
  ## Database configuration for csghub-server
  postgresql:
    ## Database name
    name: "csghub_server"
    ## Database host address
    host: "127.0.0.1"
    ## Database port number
    port: 5432
    ## Database username
    user: "csghub_server"
    ## Database password
    password: ""
    ## Database timezone
    timezone: "Asia/Shanghai"
  redis:
    endpoint: "127.0.0.1:6379"
    auth:
      user: "default"
      password: ""
    max_retry: 3
    min_idle_connections: 0
    sentinel:
      mode: false
      endpoint: ""
      master: ""
  gitaly:
    address: "tcp://127.0.0.1:8075"
    storage: "default"
    token: ""
    jwt_secret: "signing-key"
    ## Path to the secret file for authentication
    secret_file: "/var/opt/csghub/gitaly/.csghub_secret"
    ## Secret key used for signing
    secret: "signing-key"
  casdoor:
    client_id: "7a97bc5168cb75ffc514"
    client_secret: "33bd85106818efd90c57fb35ffc787aabbff6f7a"
    endpoint: "http://csghub.example.com:8000"
    certificate: "/opt/csghub/etc/casdoor/token_jwt_key.pem"
    organization_name: "OpenCSG"
    application_name: "CSGHub"
  s3:
    ## Default value from internal Minio
    ## AWS access key ID
    accesskey: "minio"
    ## AWS secret access key
    secretkey: ""
    ## AWS region name
    region: "cn-north-1"
    ## Custom endpoint URL (for non-AWS S3 compatible services)
    regionendpoint: "127.0.0.1:9000"
    ## Force path-style URLs for S3 (auto/path)
    bucket_lookup: "auto"
    ## S3 bucket name
    bucket: "csghub-server"
    ## Server-side encryption (true/false)
    encrypt: false
    ## Use HTTPS (true/false)
    secure: false
  model:
    ## In minutes
    deploy_timeout: 30
    download_endpoint: "https://hub.opencsg.com"
    docker_reg_base: "opencsg-registry.cn-beijing.cr.aliyuncs.com/public/"
  dataset:
    prompt_max_jsonl_file_size: 1048576
  moderation:
    address: "http://127.0.0.1:8089"
    encoded_sensitive_words: ""
  dataflow:
    address: "http://127.0.0.1:8001"
  workflow:
    endpoint: "127.0.0.1:7233"
  multi_sync:
    enabled: true
    sync_as_client_cron_expression: "0 * * * *"
    calc_recom_score_cron_expression: "1 * * * *"
  nats:
    url: ""
    msg_fetch_timeout_in_sec: 5
    meter_request_subject: "accounting.metering.>"
    meter_duration_send_subject: "accounting.metering.duration"
    meter_token_send_subject: "accounting.metering.token"
    meter_quota_send_subject: "accounting.metering.quota"
  proxy: ["opencsg.com", "sync.opencsg.com"]
  instrumentation:
    otlp_logging: false
    otlp_endpoint: ""
  telemetry:
    enable: true

mirror_repo:
  listen_port: 8085
  worker_number: 5
  sync_interval: 1

mirror_lfs:
  part_size: 100
  lfs_concurrency: 5

runner:
  enable: false
  listen_port: 8082
  ## deploy configuration settings
  deploy:
    ## Kubernetes namespace where resources will be deployed
    namespace: "spaces"
    timeout: 60
    ## Knative service configuration
    knative:
      ## List of service configurations
      services:
        ## Service type configuration
        - type: "NodePort"
          ## Knative serving internal domain name for the service
          domain: "app.internal"
          ## Host IP address for the service
          host: "192.168.18.10"
          ## Port number for the service
          port: 30213
  image_builder:
    namespace: "image-factory"
    git_image: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/alpine/git:2.36.2"
    kaniko_image: "opencsg-registry.cn-beijing.cr.aliyuncs.com/public/kaniko-project-executor:v1.23.2"
    job_ttl: 120
    status_ttl: 300
  registry:
    prefix: "registry.example.com:5000/csghub/"
    pull_secret: "csghub-docker-credential"
  gpu_label: "nvidia.com/nvidia_name"
  readness_delay_seconds: 120
  readness_period_seconds: 10
  readness_failure_threshold: 10
  pip_index_url: "https://pypi.tuna.tsinghua.edu.cn/simple/"

proxy:
  listen_port: 8083

accounting:
  listen: "127.0.0.1:8086"

dataviewer:
  enable: true

dnsmasq:
  enable: true

user:
  listen: "127.0.0.1:8088"

portal:
  ## Database configuration for csghub-server
  db:
    ## Database name
    name: "csghub_portal"
    ## Database host address
    host: "127.0.0.1"
    ## Database port number
    port: 5432
    ## Database username
    user: "csghub_portal"
    ## Database password
    password: ""
  s3:
    ## Default value from internal Minio
    ## AWS access key ID
    accesskey: "minio"
    ## AWS secret access key
    secretkey: ""
    ## AWS region name
    region: "cn-north-1"
    ## Custom endpoint URL (for non-AWS S3 compatible services)
    regionendpoint: "127.0.0.1:9000"
    ## Force path-style URLs for S3 (true/false)
    forcepathstyle: false
    ## S3 bucket name
    bucket: "csghub-server"
    ## Server-side encryption (true/false)
    encrypt: false
    ## Use HTTPS (true/false)
    secure: false

##########################################################################
# Gitaly Configuration
# - Git repository storage service for GitLab, handles all Git operations.
##########################################################################
gitaly:
  ## Enable Gitaly
  enable: true
  ## Directory containing Gitaly executables
  bin_dir: "/opt/csghub/embedded/bin"
  ## The data directory for Gitaly
  data_dir: "/var/opt/csghub/gitaly"
  ## Unencrypted TCP listen address
  listen_addr: "127.0.0.1:8075"
  tls_listen_adder: ""
  prometheus_listen_addr: "127.0.0.1:9236"
  auth:
    ## Auth token for Gitaly authentication
    token: ""
    transitioning: false
  storage:
    ## Storage name
    name: "default"
    ## Storage path
    path: "/var/opt/csghub/gitaly/repositories"
  # tls:
  #   ## Path to TLS certificate
  #   certificate_path: "/var/opt/csghub/gitaly/ssl/cert.cert"
  #   ## Path to TLS key
  #   key_path: "/var/opt/csghub/gitaly/ssl/key.pem"
  logging:
    ## Log destination
    dir: "/var/log/csghub/gitaly"
    ## Log format (json or text)
    format: "json"
    ## Log level (debug, info, warn, error, fatal, panic)
    level: "info"
    sentry_dsn: ""
    sentry_environment: ""
  prometheus:
    ## Prometheus gRPC latency buckets
    grpc_latency_buckets: [0.001, 0.005, 0.025, 0.1, 0.5, 1.0, 10.0, 30.0, 60.0, 300.0, 1500.0]
  hooks:
    ## Directory for custom Git hooks
    custom_hooks_dir: "/var/opt/csghub/gitaly/custom_hooks"
  http_settings:
    read_timeout: 300
    self_signed_cert: false
  concurrency:
    ## RPC method
    rpc: "/gitaly.RepositoryService/OptimizeRepository"
    ## Max concurrency per repository
    max_per_repo: 1
    ## Max wait time in queue
    max_queue_wait: "1m"
    ## Max queue size
    max_queue_size: 10
  rate_limiting:
    ## RPC method
    rpc: "/gitaly.SmartHTTPService/PostUploadPackWithSidechannel"
    ## Rate limiting interval
    interval: "1m"
    ## Rate limiting burst size
    burst: 5
  daily_maintenance:
    ## Disable daily maintenance
    disabled: false
    ## Start hour
    start_hour: 23
    ## Start minute
    start_minute: 30
    ## Maintenance duration
    duration: "45m"
    ## Storages to include
    storages: ["default"]
#  cgroups:
#    ## Cgroups mountpoint
#    mountpoint: "/sys/fs/cgroup"
#    ## Cgroups hierarchy root
#    hierarchy_root: "gitaly"
#    ## Memory limit in bytes
#    memory_bytes: 64424509440
#    ## CPU shares
#    cpu_shares: 1024
#    ## CPU quota in microseconds
#    cpu_quota_us: 400000
#    repositories:
#      ## Repository count
#      count: 500
#      ## Repository memory limit in bytes
#      memory_bytes: 12884901888
#      ## Repository CPU shares
#      cpu_shares: 512
#      ## Repository CPU quota in microseconds
#      cpu_quota_us: 200000
#  backup:
#    ## Go cloud URL for backups
#    go_cloud_url: "gs://gitaly-backups"
#    ## Backup layout
#    layout: "pointer"
#    ## Go cloud URL for WAL backups
#    wal_backup_go_cloud_url: "gs://gitaly-wal-backups"
#    ## Number of WAL backup workers
#    wal_backup_worker_count: 1
#    ## Buffer size
#    buffer_size: 0
#  bundle_uri:
#    ## Go cloud URL for bundle URI
#    go_cloud_url: "gs://my-bundle-uri-bucket"
  timeout:
    ## Upload pack negotiation timeout
    upload_pack_negotiation: "10m"
    ## Upload archive negotiation timeout
    upload_archive_negotiation: "1m"
  ## Git configuration parameters
  git:
    use_bundled_binaries: true
    ignore_gitconfig: true
    bin_path: "/opt/gitlab/embedded/bin/git"
    catfile_cache_size: 100
    signing_key: ""
    config:
      - key: "fetch.fsckObjects"
        value: true

gitlab_shell:
  listen_port: 2222
  ssh_port: 2222
  log:
    dir: "/var/log/csghub/gitlab_shell"
    level: "INFO"
    ## json, text
    format: "json"

##########################################################################
# Praefect Configuration
# - Router and manager for Gitaly clusters, enabling Git repository +
#   replication and high availability.
##########################################################################
praefect:
  ## Enable Praefect
  enable: false
  ## Praefect listen address
  listen_addr: "127.0.0.1:2305"
  auth:
    ## Auth token for Praefect
    token: ""
  logging:
    ## Log destination
    dir: "/var/log/csghub/praefect"
    ## Log format
    format: "json"
    ## Log level
    level: "info"
  database:
    ## Praefect database host
    host: "127.0.0.1"
    ## Praefect database port
    port: 5432
    ## Praefect database user
    user: "praefect"
    ## Praefect database password
    password: ""
    ## Praefect database name
    dbname: "praefect_production"
  virtual_storage:
    - ## Virtual storage name
      name: "default"
      nodes:
        - ## Gitaly storage name
          storage: "gitaly-01"
          ## Gitaly address
          address: "tcp://10.6.0.21:8075"
          ## Gitaly token
          token: ""
        - ## Gitaly storage name
          storage: "gitaly-02"
          ## Gitaly address
          address: "tcp://10.6.0.22:8075"
          ## Gitaly token
          token: ""
        - ## Gitaly storage name
          storage: "gitaly-03"
          ## Gitaly address
          address: "tcp://10.6.0.23:8075"
          ## Gitaly token
          token: ""
  replication:
    batch_size: 10
  reconciliation:
    ## Reconciliation scheduling interval
    scheduling_interval: "1m"
    ## Histogram buckets
    histogram_buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
  failover:
    ## Enable failover
    enabled: true
  graceful_stop_timeout: "30s"
  prometheus_listen_addr: "127.0.0.1:9652"
  prometheus:
    grpc_latency_buckets: [ 0.001, 0.005, 0.025, 0.1, 0.5, 1.0, 10.0, 30.0, 60.0, 300.0, 1500.0 ]
  sentry:
    sentry_environment: ""
    sentry_dsn: ""
  background_verification:
    delete_invalid_records: false
    verification_interval: "72h"
  # yamux:
  #   ## Maximum stream window size in bytes
  #   maximum_stream_window_size_bytes: 262144
  #   ## Accept backlog
  #   accept_backlog: 256

##########################################################################
# Minio Configuration
# - High-performance, S3-compatible object storage service.
##########################################################################
minio:
  ## Enable or disable MinIO service
  enable: true
  ## Path to store MinIO data files
  data: "/var/opt/csghub/minio/data"
  ## Path for MinIO log files
  log: "/var/log/csghub/minio"
  ## Authentication credentials for MinIO
  auth:
    ## MinIO root username
    user: "minio"
    ## MinIO root password
    password: ""
  ## Environment variables for MinIO
  environments:
    ## Additional MinIO server options (console port configuration)
    MINIO_OPTS: " --console-address=:9001"


##########################################################################
# Consul Configuration
# - Service discovery and configuration tool with distributed key-value store.
##########################################################################
consul:
  ## Enable or disable Consul service
  enable: false
  ## Datacenter name for Consul cluster
  datacenter: "csghub-consul-dc"
  ## Directory to store Consul data
  data_dir: "/var/opt/csghub/consul"
  ## Network interface address to bind to
  bind_addr: "0.0.0.0"
  ## Indicate Which client can connect to
  client_addr: "0.0.0.0"
  ## Address to advertise to other Consul nodes
  advertise_addr: "127.0.0.1"
  ## Whether to run in server mode (true) or client mode (false)
  server: true
  bootstrap_expect: 3
  ## Web UI configuration
  ui_config:
    ## Enable or disable Consul web UI
    enabled: false
  ## List of Consul server addresses to join during startup
  retry_join: ["127.0.0.1", "127.0.0.2", "127.0.0.3"]
  ## Directory to log Consul
  log_dir: "/var/log/csghub/consul"

##########################################################################
# Postgresql Configuration
# - Primary relational database for GitLab, storing most application data.
##########################################################################
postgresql:
  ## Enable or disable PostgreSQL service
  enable: true
  ## Directory to store data files
  data_dir: "/var/opt/csghub/postgresql/data"
  ## Network addresses to listen on (* = all available IPs)
  listen_addresses: "*"
  ## TCP port number for connections
  port: 5432
  ## Maximum number of concurrent connections
  max_connections: 200
  ## Shared memory buffer size for caching data
  shared_buffers: "256MB"
  ## Preloaded extensions (comma-separated)
  shared_preload_libraries: "pg_stat_statements,zhparser"
  ## Log all SQL statements (off|ddl|mod|all)
  log_statement: "none"
  ## Log checkpoint operations
  log_checkpoints: "off"
  ## Log statements elapsed above 2s
  log_min_duration_statement: "2s"
  ## Write-Ahead Log level (minimal|replica|logical)
  wal_level: "minimal"
  ## Allow read-only connections during recovery
  hot_standby: "off"
  ## Write full page images to WAL for checksums
  wal_log_hints: "off"
  ## Maximum number of WAL sender processes
  max_wal_senders: 4
  ## Maximum number of replication slots
  max_replication_slots: 3
  ## Automatic checkpoint interval
  checkpoint_timeout: "10min"
  ## Specify db timezone
  timezone: "Asia/Shanghai"
  ## Host-based authentication rules
  pg_hba:
    - host all all all scram-sha-256

##########################################################################
# Patroni Configuration (Patroni configuration for PostgreSQL HA)
# - HA (High Availability) framework for PostgreSQL, +
#   automating failover and topology management.
##########################################################################
patroni:
  ## Whether to enable Patroni (true/false)
  enable: false
  ## Cluster name/scope
  scope: "postgresql-ha"
  ## Namespace for DCS (Distributed Configuration Store)
  namespace: "/service"
  ## Unique node name in the cluster
  name: "patroni-node-01"
  ## IP address Patroni listens on
  listen: "127.0.0.1"
  log:
    level: "INFO"
    type: "plain"
  ## Consul connection string (host:port)
  consul: "127.0.0.1:8500"
  ## Cluster bootstrap configuration
  bootstrap:
    ## How long to wait between leader checks (seconds)
    loop_wait: 10
    ## Timeout for retrying operations after failure (seconds)
    retry_timeout: 10
    ## TTL for leader lock (seconds)
    ttl: 30
    ## Timeout for master to start (seconds)
    master_start_timeout: 60
    ## Whether to use synchronous replication (true/false)
    synchronous_mode: false
    ## Maximum allowed replication lag for failover (bytes)
    maximum_lag_on_failover: "" # eg: 1048576
  ## PostgreSQL specific configuration
  postgresql:
    data_dir: "/var/opt/csghub/postgresql/data"
    ## Authentication configuration
    authentication:
      ## Superuser password
      postgres: ""
      ## Replication user password
      replicator: ""
      ## Rewind user password
      rewinder: ""
    ## PostgreSQL parameters
    parameters:
      ## Shared memory buffers for PostgreSQL
      shared_buffers: "256MB"
    pgpass: /var/opt/csghub/patroni/.pgpass
  remove_data_directory_on_rewind_failure: true
  remove_data_directory_on_diverged_timelines: true
  ## Standby leader configuration (disabled)
  standby_leader:
    enable: false
    host: "127.0.0.1"
    port: "5432"
    primary_slot_name: "standby_slot"
    recovery_min_apply_delay: "0"
  ## Virtual IP management (disabled)
  callback:
     enable: false
     virtual_ip: "127.0.0.1"
     prefix: 24
     interface: "ens33"
  ## Watchdog configuration (disabled)
  # watchdog:
  #   ## Allowed values: off, automatic, required
  #   mode: "automatic"
  #   device: /dev/watchdog
  #   safety_margin: 20
  ## Cluster tags (disabled)
  # tags:
  #   ## Whether node can be cloned from
  #   clonefrom: true
  #   ## Failover priority (higher = more preferred)
  #   failover_priority: 1
  #   ## Whether to exclude from load balancing
  #   noloadbalance: false
  #   ## Whether to disable streaming replication
  #   nostream: false
  #   ## Whether to disable synchronous replication
  #   nosync: true
  #   ## Specific node to replicate from
  #   replicatefrom: ""

##########################################################################
# Redis server configuration
# - Redis configuration for single node.
##########################################################################
redis:
  ## Authentication
  password: ""
  ## Network interface to bind to (* means all available interfaces)
  listen: "*"
  ## TCP port to listen on (default Redis port)
  port: 6379
  ## Client connection timeout in seconds (0 to disable)
  timeout: 0
  ## TCP keepalive timeout in seconds
  keepalive: 300
  ## Directory for Redis data persistence (RDB/AOF files)
  data: "/var/opt/csghub/redis"
  ## Logging configuration
  log:
    ## Directory for Redis log files
    dir: "/var/log/csghub/redis"
    ## Log verbosity level (options: debug, verbose, notice, warning)
    level: "notice"

##########################################################################
# Distribution Registry Configuration
# - The toolkit to pack, ship, store, and deliver container content
# - https://github.com/distribution/distribution
##########################################################################
registry:
  ## Network address and port to listen on
  listen: "127.0.0.1:5000"
  ## Directory for Registry data persistence
  data: "/var/opt/csghub/registry"
  ## Authentication
  auth:
    ## username for authenticate
    username: "registry"
    ## password for authenticate
    password: ""
  ## Logging
  log:
    ## Directory path for storing log files
    dir: "/var/log/csghub/registry"
    ## Logging verbosity level
    ## Options error, warn, info, debug, default info
    level: "info"
    ## Log output format specification
    ## Supported formats:
    ##   - text: Human-readable plain text format
    ##   - json: Structured JSON format (machine parseable)
    ##   - logstash: Logstash-compatible JSON format
    ## Default: text
    formatter: "json"
  ## Storage backend configuration
  storage:
    ## Filesystem storage settings
    # filesystem:
    ## Root directory for storing registry files
    # rootdirectory: "/var/opt/csghub/registry"
    ## Maximum concurrent file operations
    # maxthreads: 100
    ## Amazon S3 storage settings (commented out by default)
    ## Documentation: https://distribution.github.io/distribution/storage-drivers/s3/
    s3:
      ## Default value from internal Minio
      ## AWS access key ID
      accesskey: "minio"
      ## AWS secret access key
      secretkey: ""
      ## AWS region name
      region: "cn-north-1"
      ## Custom endpoint URL (for non-AWS S3 compatible services)
      regionendpoint: "http://127.0.0.1:9000"
      ## Force path-style URLs for S3 (true/false)
      forcepathstyle: false
      ## S3 bucket name
      bucket: "csghub-registry"
      ## Server-side encryption (true/false)
      encrypt: false
      ## Use HTTPS (true/false)
      secure: false
      ## Use AWS Signature Version 4 (true/false)
      v4auth: true
      ## Skip TLS certificate verification (true/false)
      skipverify: true

##########################################################################
# NATS Configuration
# - Only provide authentication conf
##########################################################################
nats:
  ## NATS server data storage directory
  data: "/var/opt/csghub/nats"
  ## Authentication configuration for NATS server
  auth:
    ## Username for NATS authentication
    user: "natsadmin"
    ## Password for NATS authentication (recommend using secrets management in production)
    password: ""

##########################################################################
# Temporal Configuration
# - Temporal delivers an open-source Durable Execution platform that abstracts
#   away the complexity of building scalable, reliable distributed systems.
##########################################################################
temporal:
  ## Temporal service listen address and port
  listen: "127.0.0.1:7233"
  ## Authentication configuration for Temporal (leave empty if not used)
  auth:
    ## Username for Temporal authentication
    user: "temporal"
    ## Password for Temporal authentication
    password: ""
  ## Database configuration for Temporal
  db:
    ## Database name
    name: "temporal"
    ## Database host address
    host: "127.0.0.1"
    ## Database port number
    port: 5432
    ## Database username
    user: "temporal"
    ## Database password
    password: ""
  ## Retention period for workflow history (e.g., "7d" for 7 days)
  retention: "7d"

## Web UI configuration
temporal_ui:
  ## Enable or disable Temporal UI
  enable: true
  ## Public URL path for Temporal UI
  public_path: "/temporal-ui"
  auth:
    user: "temporal"
    password: ""

##########################################################################
# Casdoor Configuration
# - An open-source UI-first Identity and Access Management (IAM) / Single-Sign-On (SSO)
#   platform with web UI supporting OAuth 2.0, OIDC, SAML, CAS, LDAP, SCIM, WebAuthn,
#   TOTP, MFA, Face ID, RADIUS, Google Workspace, Active Directory and Kerberos
##########################################################################
casdoor:
  listen: "127.0.0.1:8000"
  data: "/var/opt/csghub/casdoor"
  ## Authentication for admin user
  auth:
    ## Username for Casdoor authentication
    username: "admin"
    ## Password for Casdoor authentication
    password: ""
  ## Database configuration for Casdoor
  db:
    ## Database name
    name: "casdoor"
    ## Database host address
    host: "127.0.0.1"
    ## Database port number
    port: 5432
    ## Database username
    user: "casdoor"
    ## Database password
    password: "b4d2a550f04ac69d"
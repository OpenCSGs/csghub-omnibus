{{- $csghub := (datasource "config").csghub -}}
{{- $server := (datasource "config").server -}}
{{- $praefect := (datasource "config").praefect -}}
{{- $gitlabShell := (datasource "config").gitlab_shell -}}

{{- $url := conv.URL $csghub.external_url -}}
{{- $urlParts := $url.Host | strings.Split ":" -}}
{{- $host := index $urlParts 0 -}}
{{- $port := "" -}}
{{- if gt (len $urlParts) 1 -}}
  {{- $port = index $urlParts 1 -}}
{{- else -}}
  {{- if eq $url.Scheme "https" -}}
    {{- $port = "443" -}}
  {{- else -}}
    {{- $port = "80" -}}
  {{- end -}}
{{- end -}}

saas = {{ $server.saas }}
instance_id = ""
enable_swagger = {{ $server.enable_swagger }}
enable_https = {{ $server.enable_https }}
{{- $seedFile := "/opt/csghub/etc/csghub/.seed" -}}
{{- $seed := "" -}}
{{- if file.Exists $seedFile -}}
  {{- $seed = file.Read $seedFile -}}
{{- end -}}
{{- if not $seed -}}
  {{- $seed = random.Alpha 48 -}}
  {{- file.Write $seedFile $seed -}}
{{- end -}}
{{- $apiToken := crypto.PBKDF2 "opencsg" $seed 1024 64 }}
api_token = {{ $apiToken | quote }}
docs_host = {{ printf "%s://%s:6636" $url.Scheme $host | quote }}

[api_server]
port = {{ $server.listen_port }}
public_domain = {{ $csghub.external_url | quote }}
{{- $shell_port := $gitlabShell.ssh_port }}
{{- if eq $shell_port 22 }}
ssh_domain = {{ printf "git@%s:%d" $host $shell_port | quote }}
{{- else }}
ssh_domain = {{ printf "ssh://git@%s:%d" $host $shell_port | quote }}
{{- end }}

{{ $mirrorRepo := (datasource "config").mirror_repo }}
{{- $mirrorLfs := (datasource "config").mirror_lfs -}}
[mirror]
url = {{ printf "http://localhost:%d" $mirrorRepo.listen_port | quote }}
token = ""
port = {{ $mirrorRepo.listen_port }}
{{- if $server.saas }}
remote = true
{{- else }}
remote = false
{{- end }}
session_secret_key = {{ crypto.SHA1 $seed | quote }}
worker_number = {{ $mirrorRepo.worker_number }}
lfs_concurrency = {{ $mirrorLfs.lfs_concurrency }}
part_size = {{ $mirrorLfs.part_size  }}

{{ $postgresql := $server.postgresql }}
{{- $pgUser := $postgresql.user -}}
{{- $pgPassword := $postgresql.password | default (crypto.PBKDF2 $pgUser "opencsg" 2048 8) -}}
[database]
driver = "pg"
dsn = {{ printf "postgresql://%s:%s@%s:%d/%s?sslmode=disable" $pgUser $pgPassword $postgresql.host $postgresql.port $postgresql.name | quote }}
timezone = {{ $postgresql.timezone | quote }}

{{ $redis := $server.redis }}
{{- $redisUser := $redis.auth.user -}}
{{- $redisPassword := $redis.auth.password | default (crypto.PBKDF2 $redisUser "opencsg" 2048 8) -}}
[redis]
endpoint = {{ $redis.endpoint | quote }}
max_retries = {{ $redis.max_retries }}
min_idle_connections = {{ $redis.min_idle_connections }}
user = {{ $redisUser | quote }}
password = {{ $redisPassword | quote }}
sentinel_mode = {{ $redis.sentinel.mode }}
sentinel_endpoint = {{ $redis.sentinel.endpoint | quote }}
sentinel_master = {{ $redis.sentinel.master | quote }}

[git_server]
type = "gitaly"

{{ $gitaly := $server.gitaly }}
{{- $gitalyToken := $gitaly.token | default (crypto.PBKDF2 "gitaly" "opencsg" 2048 8) -}}
[gitaly_server]
address = {{ $gitaly.address | quote }}
storge = {{ $gitaly.storage | quote }}
token = {{ $gitalyToken | quote }}
jwt_secret ={{ $gitaly.jwt_secret | quote }}

[frontend]
url = {{ $csghub.external_url | quote }}

{{ $s3 := $server.s3 }}
{{- $accessKeyId := $s3.access_key -}}
{{- $secretKey := $s3.secret_key | default (crypto.PBKDF2 $accessKeyId "opencsg" 2048 8) -}}
[s3]
access_key_id = {{ $accessKeyId | quote }}
access_key_secret = {{ $secretKey | quote }}
region = {{ $s3.region | quote }}
endpoint = {{ $s3.endpoint | default (printf "%s:9000" $host) | quote }}
internal_endpoint = {{ $s3.internal_endpoint | quote }}
bucket = {{ $s3.bucket | quote }}
enable_ssl = {{ $s3.encrypt }}
bucket_lookup = {{ $s3.bucket_lookup | quote }}

[jwt]
signing_key = {{ $gitaly.jwt_secret | quote }}
valid_hour = 24

{{ $runner := (datasource "config").runner }}
{{- $deploy := $runner.deploy -}}
{{- $runnerRegistry := $runner.registry -}}
{{- $rproxy := (datasource "config").rproxy -}}
{{- $registry := (datasource "config").registry -}}
{{- $registryPort := $registry.listen | regexp.Find ":([0-9]+)" | strings.TrimPrefix ":" -}}
[space]
builder_endpoint = {{ printf "http://localhost:%d" $runner.listen_port | quote }}
runner_endpoint = {{ printf "http://localhost:%d" $runner.listen_port | quote }}
runner_server_port = {{ $runner.listen_port }}
internal_root_domain = {{ printf "%s.app.internal" $deploy.namespace | quote }}
{{- if $deploy.usePublicDomain }}
{{- $rootDomain := "example.com" }}
{{- if and $host (regexp.Match `^[a-zA-Z0-9.-]+$` $host) }}
{{- $hostParts := strings.Split "." $host }}
{{- if le (len $hostParts) 2 }}
{{- $rootDomain = $host }}
{{- else }}
{{- $rootDomain = regexp.Replace "^[^.]+\\." "" $host }}
{{- end }}
{{- end }}
public_root_domain = {{ printf "public.%s" $rootDomain | quote }}
{{- else }}
public_root_domain = ""
{{- end }}
docker_reg_base = {{ $runnerRegistry.prefix | default (printf "%s:%s/csghub/" $host $registryPort ) | quote }}
image_pull_secret = {{ $runnerRegistry.pull_secret | quote }}
rproxy_server_port = {{ $rproxy.listen_port }}
session_secret_key = {{ crypto.SHA1 $seed | quote }}
deploy_timeout_in_min = {{ $deploy.timeout }}
gpu_model_label = {{ $runner.gpu_label | quote }}
readness_delay_seconds = {{ $runner.readness_delay_seconds }}
readness_period_seconds = {{ $runner.readness_period_seconds }}
readness_failure_threshold = {{ $runner.readness_failure_threshold }}
pypi_index_url = {{ $runner.pip_index_url| quote }}

{{ $model := $server.model -}}
[model]
deploy_timeout_in_min = {{ $model.deploy_timeout }}
download_endpoint = {{ $model.download_endpoint | quote }}
docker_reg_base = {{ $model.docker_reg_base | quote }}
nim_docker_secret_name = "ngc-secret"
nim_ngc_secret_name = "nvidia-nim-secrets"

[event]
sync_interval = {{ $mirrorRepo.sync_interval }}

{{ $casdoor := (datasource "config").casdoor -}}
{{- $casdoorListen := $casdoor.listen -}}
{{- $casdoorParts := $casdoorListen | strings.Split ":" -}}
{{- $casdoorPort := "8000" -}}
{{- if eq (len $casdoorParts) 2 -}}
  {{- $casdoorPort = index $casdoorParts 1 -}}
{{- end -}}
{{- $serverCasdoor := $server.casdoor -}}
[casdoor]
client_id = {{ $serverCasdoor.client_id | quote }}
client_secret = {{ $serverCasdoor.client_secret | quote }}
endpoint = {{ $serverCasdoor.endpoint | default (printf "%s://%s:%s" $url.Scheme $host $casdoorPort) | quote }}
certificate = {{ $serverCasdoor.certificate | quote }}
organization_name = {{ $serverCasdoor.organization_name | quote }}
application_name = {{ $serverCasdoor.application_name | quote }}

{{ $nats := (datasource "config").nats }}
{{- $natsUser := $nats.auth.user -}}
{{- $natsPassword := $nats.auth.password | default (crypto.PBKDF2 $natsUser "opencsg" 2048 8) -}}
{{- $serverNats := $server.nats -}}
[nats]
url = {{ $serverNats.url | default (printf "nats://%s:%s@localhost:4222" $natsUser $natsPassword) | quote }}
msg_fetch_timeout_in_sec = {{ $serverNats.msg_fetch_timeout_in_sec }}
meter_request_subject = {{ $serverNats.meter_request_subject | quote }}
meter_duration_send_subject = {{ $serverNats.meter_duration_send_subject | quote }}
meter_token_send_subject = {{ $serverNats.meter_token_send_subject | quote }}
meter_quota_send_subject = {{ $serverNats.meter_quota_send_subject | quote }}

{{ $accounting := (datasource "config").accounting }}
{{- $actParts := $accounting.listen | strings.Split ":" -}}
{{- $actHost := index $actParts 0 -}}
{{- $actPort := "" -}}
{{- if gt (len $actParts) 1 -}}
    {{- $actPort = index $actParts 1 -}}
{{- else -}}
    {{- $actPort = "8086" -}}
{{- end -}}
[accounting]
host = {{ printf "http://%s" $actHost | quote }}
port = {{ $actPort }}

{{ $user := (datasource "config").user }}
{{- $userParts := $user.listen | strings.Split ":" -}}
{{- $userHost := index $userParts 0 -}}
{{- $userPort := "" -}}
{{- if gt (len $userParts) 1 -}}
    {{- $userPort = index $userParts 1 -}}
{{- else -}}
    {{- $actPort = "8088" -}}
{{- end -}}
[user]
host = {{ printf "http://%s" $userHost | quote }}
port = {{ $userPort }}
signin_success_redirect_url = {{ printf "%s/server/callback" $csghub.external_url | quote }}

{{ $multi_sync := $server.multi_sync -}}
[multi_sync]
enabled = {{ $multi_sync.enabled }}
saas_api_domain = "https://hub.opencsg.com"
saas_sync_domain = "https://sync.opencsg.com"

{{ $telemetry := $server.telemetry -}}
[telemetry]
enable = {{ $telemetry.enabled | default true }}
report_url = "http://hub.opencsg.com/api/v1/telemetry"

[auto_clean]
instance = false

{{ $dataset := $server.dataset -}}
[dataset]
prompt_max_jsonl_file_size = {{ $dataset.prompt_max_jsonl_file_size }}

{{ $dataflow := $server.dataflow -}}
{{- $dfUrl := conv.URL $dataflow.address -}}
{{- $dfUrlParts := $dfUrl.Host | strings.Split ":" -}}
{{- $dfHost := index $dfUrlParts 0 -}}
{{- $dfPort := "" -}}
{{- if gt (len $dfUrlParts) 1 -}}
  {{- $dfPort = index $dfUrlParts 1 -}}
{{- else -}}
  {{- if eq $dfUrl.Scheme "https" -}}
    {{- $dfPort = "443" -}}
  {{- else -}}
    {{- $dfPort = "80" -}}
  {{- end -}}
{{- end -}}
[dataflow]
host = {{ printf "%s://%s" $dfUrl.Scheme $dfHost | quote }}
port = {{ $dfPort }}

{{ $moderation := (datasource "config").moderation -}}
{{- if $moderation.enable -}}
{{- $moderationAddress := $moderation.address -}}
{{- $moderationUrl := conv.URL $moderationAddress -}}
{{- $moderationParts := $moderationUrl.Host | strings.Split ":" -}}
{{- $moderationHost := index $moderationParts 0 | default "127.0.0.1" -}}
{{- $moderationPort := "" -}}
{{- if gt (len $moderationParts) 1 }}
  {{- $moderationPort = index $moderationParts 1 -}}
{{- else -}}
    {{- $moderationPort = "8089" -}}
{{- end -}}
[moderation]
host = {{ printf "%s://%s" $moderationUrl.Scheme $moderationHost | quote }}
port = {{ $moderationPort }}
encoded_sensitive_words = {{ $moderation.encoded_sensitive_words | quote }}

{{ $sensitive := $moderation.sensitive_check -}}
[sensitive_check]
enable = true
access_key_id = {{ $sensitive.access_key_id | quote }}
access_key_secret = {{ $sensitive.access_key_secret | quote }}
region = {{ $sensitive.region | quote }}
endpoint = {{ $sensitive.endpoint | quote }}
enable_ssl = {{ $sensitive.enable_ssl }}
{{- end -}}

{{ $workflow := $server.workflow -}}
[workflow]
endpoint = {{ $workflow.endpoint | quote }}

[cron_job]
sync_as_client_cron_expression = {{ $multi_sync.sync_as_client_cron_expression | quote }}
calc_recom_score_cron_expression = {{ $multi_sync.calc_recom_score_cron_expression | quote }}

{{ $proxy := $server.proxy -}}
[proxy]
hosts = [{{- range $k, $v := $proxy.hosts }}{{if $k}}, {{end}}{{$v | quote }}{{- end }}]

{{ $instrumentation := $server.instrumentation -}}
[instrumentation]
otlp_logging = {{ $instrumentation.otlp_logging }}
otlp_endpoint = {{ $instrumentation.otlp_endpoint | quote }}

{{ $git := $server.git -}}
[git]
operation_timeout = {{ $git.operation_timeout }}
{{- if $praefect.enable }}
check_file_size_enabled = false
{{- else }}
check_file_size_enabled = {{ $git.check_file_size_enabled }}
{{- end }}
max_un_lfs_file_size = {{ $git.max_un_lfs_file_size }}
skip_lfs_file_validation = {{ $git.skip_lfs_file_validation }}

{{ if $runner.enable }}
{{- $image_builder := $runner.image_builder -}}
[runner]
{{- if $deploy.mergingNamespace }}
image_builder_namespace = {{ $deploy.namespace | quote }}
{{- else }}
image_builder_namespace = {{ $image_builder.namespace | quote }}
{{- end }}
image_builder_git_image = {{ $image_builder.git_image | quote }}
image_builder_kaniko_image = {{ $image_builder.kaniko_image | quote }}
image_builder_job_ttl = {{ $image_builder.job_ttl }}
image_builder_status_ttl = {{ $image_builder.status_ttl }}
{{- if $runnerRegistry.prefix | regexp.Match $host }}
image_builder_kaniko_args = ["--skip-tls-verify","--insecure","--compressed-caching=false","--single-snapshot","--build-arg=PyPI={{ $runner.pip_index_url }}","--build-arg=HF_ENDPOINT={{ printf "%s/hf" $csghub.external_url }}"]
{{- else }}
image_builder_kaniko_args = ["--compressed-caching=false","--single-snapshot","--build-arg=PyPI={{ $runner.pip_index_url }}","--build-arg=HF_ENDPOINT={{ printf "%s/hf" $csghub.external_url }}"]
{{- end }}
# Kaniko arguments to configure logging and registry access.
# See official flags: https://github.com/GoogleContainerTools/kaniko?tab=readme-ov-file#additional-flags
# --log-format=json : Output logs in JSON format for strcuctured parsing.
# --log-timestamp=true : Include timestamps in log entries.
# --insecure : Allow connections to HTTP registries (non-HTTPS).
# --skip-tls-verify : Disable TLS certificate validation for registries.
# Uncomment the following line to enable pull images from a private registry without https
# image_builder_kaniko_args = ["--insecure", "--skip-tls-verify"]
{{- end }}

{{ $notification := (datasource "config").notification -}}
{{- if $notification.enable }}
{{- $notifyListen := $notification.listen -}}
{{- $notifyParts := $notifyListen | strings.Split ":" -}}
{{- $notifyHost := index $notifyParts 0 | default "127.0.0.1" -}}
{{- $notifyPort := "8095" -}}
{{- if eq (len $notifyParts) 2 -}}
  {{- $notifyPort = index $notifyParts 1 -}}
{{- end -}}
[notification]
host = {{ printf "http://%s" $notifyHost | quote }}
port = {{ $notifyPort }}
mailer_host = {{ $notification.smtp.host | quote }}
mailer_port = {{ $notification.smtp.port }}
mailer_username = {{ $notification.smtp.username | quote }}
mailer_password = {{ $notification.smtp.password | quote }}
{{- end }}

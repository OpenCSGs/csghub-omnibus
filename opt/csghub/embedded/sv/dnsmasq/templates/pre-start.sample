#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

# Exit if execute with any errors
set -e

{{- $configDir := "/opt/csghub/etc/dnsmasq" }}
{{- $runner := (datasource "config").runner }}
{{- $ns := $runner.deploy.namespace }}
{{- $services := $runner.deploy.knative.services }}
{{- range $services }}
{{- $entry := printf "address=/%s.%s/127.0.0.1" $ns .domain }}
{{- $configFile := printf "%s/%s.conf" $configDir .domain }}
{{- file.Write $configFile $entry }}
{{- end }}

{{- $csghub := (datasource "config").csghub -}}
{{- $url := conv.URL $csghub.external_url -}}
{{- $urlParts := $url.Host | strings.Split ":" -}}
{{- $host := index $urlParts 0 -}}
{{- $deploy := $runner.deploy }}
{{- if and $deploy.usePublicDomain (regexp.Match `^[a-zA-Z0-9.-]+$` $host) }}
{{- $rootDomain := "example.com" }}
{{- if and $host (regexp.Match `^[a-zA-Z0-9.-]+$` $host) }}
{{- $hostParts := strings.Split "." $host }}
{{- if le (len $hostParts) 2 }}
{{- $rootDomain = $host }}
{{- else }}
{{- $rootDomain = regexp.Replace "^[^.]+\\." "" $host }}
{{- end }}
{{- end }}
{{- $entry := printf "cname=public.%s,%s" $rootDomain $host }}
{{- $configFile := printf "%s/%s.conf" $configDir (printf "public.%s" $rootDomain) }}
{{- file.Write $configFile $entry }}
{{- end }}

# Enable local resolution
if [ -f "/etc/resolv.conf" ]; then
  if ! grep -q -w '127.0.0.1' /etc/resolv.conf; then
    cp -f /etc/resolv.conf /tmp/resolv.conf.bak
    sed '0,/nameserver/s//nameserver 127.0.0.1\n&/' /tmp/resolv.conf.bak > /etc/resolv.conf
  fi
fi


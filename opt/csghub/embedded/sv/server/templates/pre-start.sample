#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

{{- $envDir := "/opt/csghub/etc/server/env" }}
cd {{ $envDir }}

# Clear all environment variable files
# rm -rf {{ $envDir }}/* || true

{{- file.Write (printf "%s/GIN_MODE" $envDir) "release" }}

{{- $server := (datasource "config").server }}
{{- $dataDir := $server.data | default "/var/opt/csghub/server" }}
{{- $db := $server.postgresql }}
{{- $password := $db.password | default (crypto.PBKDF2 $db.user "opencsg" 2048 8) }}
{{- file.Write (printf "%s/POSTGRES_USER" $envDir) $db.user }}
{{- file.Write (printf "%s/POSTGRES_PASSWORD" $envDir) $password }}
{{- file.Write (printf "%s/POSTGRES_DB" $envDir) $db.name }}
{{- file.Write (printf "%s/HOME" $envDir) "/etc/csghub" }}
{{- file.Write (printf "%s/STARHUB_SERVER_PUBLIC_ROOT_DOMAIN" $envDir) " " }}
{{- file.Write (printf "%s/DUCKDB_HOME" $envDir) "/opt/csghub/embedded/sv/server" }}
{{- file.Write (printf "%s/DUCKDB_EXTENSION_DIRECTORY" $envDir) "/opt/csghub/embedded/sv/server" }}

{{- $postgresql := (datasource "config").postgresql }}
{{- $patroni := (datasource "config").patroni }}
{{- if or $postgresql.enable $patroni.enable }}
# Create server database
/opt/csghub/service/postgresql/create_database {{ $db.name }} {{ $db.user }} {{ $password }}
{{- end }}

# exit when error
set -e

{{- $configDir := "/opt/csghub/etc/server" }}
{{- $configFile := printf "%s/config.toml" $dataDir }}
cd {{ $configDir }}

# Define constants
readonly SERVER_BIN="/opt/csghub/embedded/bin/csghub-server"
readonly ENV_DIR="/opt/csghub/etc/server/env"

# Build command arguments
args=()
[[ -f "{{ $configFile }}" ]] && args=("--config={{ $configFile }}" "${args[@]}")

echo "Database setup..."
echo "Migration init"
chpst -e "$ENV_DIR" -P -u root:root "$SERVER_BIN" migration init "${args[@]}"

echo "Migration migrate"
chpst -e "$ENV_DIR" -P -u root:root "$SERVER_BIN" migration migrate "${args[@]}"

# Load local sql scripts
cd /opt/csghub/service/server
[ -x "/scripts/pg_executor" ] && /scripts/pg_executor {{ $db.name }} {{ $db.user }} {{ $password }}

{{- $minio := (datasource "config").minio }}
{{- if $minio.enable }}
# Create bucket
[ -x "/opt/csghub/service/minio/create_bucket" ] && /opt/csghub/service/minio/create_bucket {{ $server.s3.bucket }}
{{- end }}

find {{ $configDir }} -mindepth 1 -maxdepth 1 ! -name '*.sample' ! -name 'seed' ! -name 'env' ! -name 'scripts' -exec cp -r {} {{ $dataDir }} \;

exit 0
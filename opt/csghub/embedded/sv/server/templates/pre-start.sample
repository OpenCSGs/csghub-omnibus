#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

{{- $envDir := "/opt/csghub/etc/server/env" }}
mkdir -p {{ $envDir }} &>/dev/null

# Clear all environment variable files
rm -rf {{ $envDir }}/* &>/dev/null

echo "release" > {{ $envDir }}/GIN_MODE

{{- $server := (datasource "config").server }}
{{- $envDir := "/opt/csghub/etc/server/env" }}
{{- $dataDir := $server.data | default "/var/opt/csghub/server" }}
if [ ! -d {{ $dataDir }} ]; then
    mkdir -p {{ $dataDir }}
fi

{{- $dbname := "csghub_server" }}
{{- $password := crypto.PBKDF2 $dbname "opencsg" 2048 8 }}
{{- if has $server "db" }}
{{- $db := $server.db }}
{{- if $db.name }}
{{- $dbname = $db.name }}
{{- end }}
{{- if $db.password }}
{{- $password = $db.password }}
{{- end }}
{{- end }}
echo {{ $dbname }} > {{ $envDir }}/POSTGRES_USER
echo {{ $password }} > {{ $envDir }}/POSTGRES_PASSWORD
echo {{ $dbname }} > {{ $envDir }}/POSTGRES_DB

# Create server database
/opt/csghub/service/postgresql/create_database {{ $dbname }} {{ $password }}

# exit when error
set -e

{{- $configDir := "/opt/csghub/etc/server" }}
{{- $configFile := printf "%s/config.toml" $dataDir }}

cd {{ $configDir }}
COMMAND="/opt/csghub/embedded/bin/csghub-server"
if [ -f "{{ $configFile }}" ]; then
  COMMAND="$COMMAND --config={{ $configFile }}"
fi

echo "Database setup..."
echo "Migration init"
chpst -e /opt/csghub/etc/server/env -P \
    -U root:root \
    -u root:root \
    $COMMAND migration init

echo "Migration migrate"
chpst -e /opt/csghub/etc/server/env -P \
    -U root:root \
    -u root:root \
    $COMMAND migration migrate

cd -
# Load local sql scripts
/opt/csghub/service/postgresql/exec_pg_scripts {{ $dbname }} {{ $password }}

# Create bucket
if [ -f "/opt/csghub/service/minio/create_bucket" ]; then
    /opt/csghub/service/minio/create_bucket {{ $server.s3.bucket }}
fi

exit 0
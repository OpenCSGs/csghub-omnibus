#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

{{- $envDir := "/opt/csghub/etc/portal/env" }}
mkdir -p {{ $envDir }} &>/dev/null

# Clear all environment variable files
rm -rf {{ $envDir }}/* &>/dev/null

# Define the repository parent directory
{{- $dataDir := (datasource "config").portal.data | default "/var/opt/csghub/portal" }}

echo "production" > {{ $envDir }}/CSGHUB_PORTAL_APP_ENV
echo "true" > {{ $envDir }}/CSGHUB_PORTAL_ON_PREMISE
echo "false" > {{ $envDir }}/CSGHUB_PORTAL_SENSITIVE_CHECK

# Switch Workdir
cd /

{{- $seedFile := "/opt/csghub/etc/server/seed" -}}
{{- $seed := file.Read $seedFile -}}
{{- if not $seed -}}
{{- $seed = random.Alpha 48 | file.Write $seedFile -}}
{{- end -}}
{{- $apiToken := crypto.PBKDF2 "opencsg" $seed 1024 64 -}}

{{- $csghub := (datasource "config").csghub }}
{{- $portal := (datasource "config").portal }}
{{- $url := conv.URL $csghub.external_url }}
echo {{ $url }} > {{ $envDir }}/CSGHUB_PORTAL_STARHUB_BASE_URL
echo {{ $apiToken }} > {{ $envDir }}/CSGHUB_PORTAL_STARHUB_API_KEY

{{- if eq $url.Scheme "https" }}
echo "true" > {{ $envDir }}/CSGHUB_PORTAL_ENABLE_HTTPS
{{- else }}
echo "false" > {{ $envDir }}/CSGHUB_PORTAL_ENABLE_HTTPS
{{- end }}

{{- $db := dict }}
{{- if has $portal "db" }}
{{- $db = $portal.db }}
{{- end }}
{{- $user := $db.user | default "csghub_portal" }}
{{- $password := $db.password | default (crypto.PBKDF2 $user "opencsg" 2048 8) }}
{{- $name := $db.name | default "csghub_portal" }}
{{- $host := $db.host | default "127.0.0.1" }}
{{- $port := $db.port | default 5432 }}
echo "postgresql://{{ $user }}:{{ $password }}@{{ $host }}:{{ $port }}/{{ $name }}?sslmode=disable" > {{ $envDir }}/CSGHUB_PORTAL_DATABASE_DSN
/opt/csghub/etc/postgresql/create_db.sh {{ $name }} {{ $password }}

{{- $urlParts := $url.Host | strings.Split ":" }}
{{- $host := index $urlParts 0 | default "csghub.example.com" }}
{{- $casdoor := (datasource "config").casdoor -}}
{{- $casdoorListen := "127.0.0.1:8000" -}}
{{- if has $casdoor "listen" -}}
{{- if $casdoor.listen -}}
{{- $casdoorListen = $casdoor.listen -}}
{{- end -}}
{{- end -}}
{{- $casdoorParts := $casdoorListen | strings.Split ":" }}
{{- $casdoorHost := index $casdoorParts 0 }}
{{- $casdoorPort := index $casdoorParts 1 }}
{{- $casdoorClientId := $casdoor.client_id | default "7a97bc5168cb75ffc514" }}
echo "{{ $url.Scheme }}://{{ $host }}:{{ $casdoorPort }}/login/oauth/authorize?client_id={{ $casdoorClientId }}&response_type=code&redirect_uri={{ $csghub.external_url }}/api/v1/callback/casdoor&scope=read&state=casdoor" > {{ $envDir }}/CSGHUB_PORTAL_LOGIN_URL

{{- $s3 := dict }}
{{- if has $portal "s3" }}
{{- $s3 = $portal.s3 }}
{{- end }}
{{- $accessKeyId := $s3.accesskey | default "minio" }}
echo {{ $s3.encrypt | default false }} > {{ $envDir }}/CSGHUB_PORTAL_S3_ENABLE_SSL
echo {{ $s3.region | default "cn-north-1" }} > {{ $envDir }}/CSGHUB_PORTAL_S3_REGION
echo {{ $accessKeyId }} > {{ $envDir }}/CSGHUB_PORTAL_S3_ACCESS_KEY_ID
echo {{ $s3.secretkey | default (crypto.PBKDF2 $accessKeyId "opencsg" 2048 8) }} > {{ $envDir }}/CSGHUB_PORTAL_S3_ACCESS_KEY_SECRET
echo {{ $s3.bucket | default "csghub-portal" }} > {{ $envDir }}/CSGHUB_PORTAL_S3_BUCKET
echo {{ $s3.endpoint | default "127.0.0.1:9000" }} > {{ $envDir }}/CSGHUB_PORTAL_S3_ENDPOINT

exit 0

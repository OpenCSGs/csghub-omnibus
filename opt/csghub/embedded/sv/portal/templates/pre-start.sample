#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

# Exit if execute with any errors
set -e

{{- $envDir := "/opt/csghub/etc/portal/env" }}

# Clear all environment variable files
# rm -rf {{ $envDir }}/* || true

# Define the repository parent directory
{{- $portal := (datasource "config").portal }}
{{- $dataDir := $portal.data | default "/var/opt/csghub/portal" }}

{{- file.Write (printf "%s/CSGHUB_PORTAL_APP_ENV" $envDir) "production" }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_ON_PREMISE" $envDir) "true" }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_SENSITIVE_CHECK" $envDir) "false" }}

{{- $seedFile := "/opt/csghub/etc/csghub/.seed" -}}
{{- $seed := "" -}}
{{- if file.Exists $seedFile -}}
  {{- $seed = file.Read $seedFile -}}
{{- end -}}
{{- if not $seed -}}
  {{- $seed = random.Alpha 48 -}}
  {{- file.Write $seedFile $seed -}}
{{- end -}}
{{- $apiToken := crypto.PBKDF2 "opencsg" $seed 1024 64 -}}

{{- $csghub := (datasource "config").csghub }}
{{- $url := conv.URL $csghub.external_url }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_STARHUB_BASE_URL" $envDir) $url }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_STARHUB_API_KEY" $envDir) $apiToken }}

{{- if eq $url.Scheme "https" }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_ENABLE_HTTPS" $envDir) "true" }}
{{- else }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_ENABLE_HTTPS" $envDir) "false" }}
{{- end }}

{{- $db := $portal.db }}
{{- $password := $db.password | default (crypto.PBKDF2 $db.user "opencsg" 2048 8) }}
{{- $dsn := printf "postgresql://%s:%s@%s:%d/%s?sslmode=disable" $db.user $password $db.host $db.port $db.name }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_DATABASE_DSN" $envDir) $dsn }}

{{- $postgresql := (datasource "config").postgresql }}
{{- $patroni := (datasource "config").patroni }}
{{- if or $postgresql.enable $patroni.enable }}
# Create database and user
/opt/csghub/service/postgresql/create_database {{ $db.name }} {{ $db.user }} {{ $password }}
{{- end }}

{{- $urlParts := $url.Host | strings.Split ":" }}
{{- $host := index $urlParts 0 | default "csghub.example.com" }}
{{- $casdoor := (datasource "config").casdoor }}
{{- $casdoorListen := $casdoor.listen }}
{{- $casdoorParts := $casdoorListen | strings.Split ":" }}
{{- $casdoorHost := index $casdoorParts 0 }}
{{- $casdoorPort := index $casdoorParts 1 }}
{{- $casdoorClientId := $casdoor.client_id | default "7a97bc5168cb75ffc514" }}
{{- $callback := printf "%s://%s:%s/login/oauth/authorize?client_id=%s&response_type=code&redirect_uri=%s/api/v1/callback/casdoor&scope=read&state=casdoor" $url.Scheme $host $casdoorPort $casdoorClientId $csghub.external_url }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_LOGIN_URL" $envDir) $callback }}

{{- $s3 := $portal.s3 }}
{{- $accessKeyId := $s3.access_key }}
{{- $accessSecretKey := $s3.secret_key | default (crypto.PBKDF2 $accessKeyId "opencsg" 2048 8) }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_ENABLE_SSL" $envDir) $s3.secure }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_REGION" $envDir) ($s3.region | default (printf "%s:9000" $host)) }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_ACCESS_KEY_ID" $envDir) $accessKeyId }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_ACCESS_KEY_SECRET" $envDir) $accessSecretKey }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_BUCKET" $envDir) $s3.bucket }}
{{- file.Write (printf "%s/CSGHUB_PORTAL_S3_ENDPOINT" $envDir) $s3.endpoint }}

{{- $minio := (datasource "config").minio }}
{{- if $minio.enable }}
# Create bucket
[ -x "/opt/csghub/service/minio/create_bucket" ] && /opt/csghub/service/minio/create_bucket {{ $portal.s3.bucket }}
{{- end }}



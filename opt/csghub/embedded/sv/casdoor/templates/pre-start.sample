#!/bin/bash

# Redirect stderr -> stdout
exec 2>&1

# exit on error
set -e

{{- $envDir := "/opt/csghub/etc/casdoor/env" }}
{{- $configDir := "/opt/csghub/etc/casdoor" }}
{{- $casdoor := (datasource "config").casdoor }}
{{- $db := $casdoor.db }}
{{- $password := $db.password | default (crypto.PBKDF2 $db.user "opencsg" 2048 8) }}
{{- file.Write (printf "%s/DSN" $envDir) (printf "postgresql://%s:%s@%s:%d/%s" (conv.ToString $db.user) (conv.ToString $password) (conv.ToString $db.host) (conv.ToInt64 $db.port) (conv.ToString $db.name)) }}

{{- $postgresql := (datasource "config").postgresql }}
{{- $patroni := (datasource "config").patroni }}
{{- if or $postgresql.enable $patroni.enable }}
# Create casdoor database
/opt/csghub/service/postgresql/create_database {{ $db.name }} {{ $db.user }} {{ $password }}
{{- end }}

{{- $dataDir := (datasource "config").casdoor.data | default "/var/opt/csghub/casdoor" }}
if [ -f {{ $dataDir }}/app.conf ]; then
  mkdir -p {{ $dataDir }}/conf || true
  mv {{ $dataDir }}/app.conf {{ $dataDir }}/conf
  cp -a {{ $configDir }}/{web,files} {{ $dataDir }}/ || true
fi

COMMAND="/opt/csghub/embedded/bin/casdoor"

# Initialize database
(cd {{ $dataDir }} && $COMMAND || true)&

# Wait to initialize
while true; do
  res=$(chpst -e {{ $envDir }} /opt/csghub/etc/csghub/scripts/pg_exists "application")
  if [ "$res" -gt 0 ]; then
    break
  fi
done

# Clean up any existing processes
echo "Checking for existing casdoor processes..."
if pgrep -f "$COMMAND" >/dev/null; then
    echo "Found existing casdoor process, attempting graceful shutdown..."
    pkill -f "$COMMAND" || true

    # Force kill if still running after graceful attempt
    if pgrep -f "$COMMAND" >/dev/null; then
        echo "Forcing termination of remaining processes..."
        pkill -9 -f "$COMMAND" || true
    fi
fi

# Load local sql scripts
cd /opt/csghub/service/casdoor
[ -x "/opt/csghub/etc/csghub/scripts/pg_executor" ] && chpst -e {{ $envDir }} /opt/csghub/etc/csghub/scripts/pg_executor


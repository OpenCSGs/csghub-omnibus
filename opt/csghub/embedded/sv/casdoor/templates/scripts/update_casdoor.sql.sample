{{- $csghub := (datasource "config").csghub }}
{{- $casdoor := (datasource "config").casdoor }}
--
-- Record Timestamp
--
SELECT now() as "Execute Timestamp";

--
-- PostgreSQL database dump
--
SET exit_on_error = on;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Set Default Schema for All Tables
--

SELECT pg_catalog.set_config('search_path', 'public', false);

--
-- Name: application; Type: TABLE; Schema: public; Owner: csghub
--
-- Connect to casdoor management database
\connect {{ $casdoor.db.name }}

-- Dynamically update redirect_uris in application table (only if table exists)
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'application'
    ) THEN
        EXECUTE format('
            UPDATE
                application
            SET
                redirect_uris = ''["{{ $csghub.external_url }}/api/v1/callback/casdoor"]''
            WHERE
                name = ''CSGHub''
        ');

        -- Disable User Signup for Build-in Application
        -- Enable Select organization mode for login
        EXECUTE format('
            UPDATE
                application
            SET
                enable_sign_up = ''f'',
                org_choice_mode = ''Select''
            WHERE
                name = ''app-built-in''
        ');
    END IF;
END
$$;

-- Dynamically update admin password in user table (only if table exists)
{{- $initPassFile := "/etc/csghub/init_root_password" -}}
{{- $pass := "" -}}
{{- if file.Exists $initPassFile -}}
  {{- $pass = file.Read $initPassFile -}}
{{- end -}}
{{- if not $pass -}}
  {{- $pass = random.Alpha 24 -}}
  {{- file.Write $initPassFile $pass -}}
{{- end }}
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'user'
    ) THEN
        EXECUTE '
            UPDATE
                "user"
            SET
                password_type = ''bcrypt'',
                password = ''{{ $pass | crypto.Bcrypt }}''
            WHERE
                name = ''admin''
                AND password_type = ''plain''
        ';
    END IF;
END
$$;

-- Dynamically update GitLab_Provider in provider table (only if table exists)
{{- $starship := (datasource "config").starship }}
{{- $oauth := $starship.oauth }}
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'provider'
    ) THEN
        EXECUTE '
            UPDATE
                "provider"
            SET
                client_id = ''{{ $oauth.client_id }}'',
                client_secret = ''{{ $oauth.client_secret }}'',
                custom_auth_url = ''{{ printf "%s/oauth/authorize" $oauth.issuer }}'',
                custom_token_url = ''{{ printf "%s/oauth/token" $oauth.issuer }}'',
                custom_user_info_url = ''{{ printf "%s/api/v4/user" $oauth.issuer }}''
            WHERE
                name = ''GitLab_Provider'';
        ';
    END IF;
END
$$;
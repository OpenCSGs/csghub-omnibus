{{- $csghub := (datasource "config").csghub }}
{{- $url := conv.URL $csghub.external_url -}}
{{- $urlParts := $url.Host | strings.Split ":" -}}
{{- $host := index $urlParts 0 | default "csghub.example.com" -}}
{{- $casdoor := (datasource "config").casdoor }}
{{- $casdoorListen := $casdoor.listen -}}
{{- $casdoorParts := $casdoorListen | strings.Split ":" -}}
{{- $casdoorHost := index $casdoorParts 0 -}}
{{- $casdoorPort := index $casdoorParts 1 -}}
{{- if eq $casdoorHost "127.0.0.1" -}}
{{- $casdoorHost = $host -}}
{{- end -}}
{{- $casdoorEndpoint := printf "%s://%s:%s" $url.Scheme $casdoorHost $casdoorPort -}}
--
-- Record Timestamp
--
SELECT now() as "Execute Timestamp";

--
-- PostgreSQL database dump
--
SET exit_on_error = on;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Set Default Schema for All Tables
--

SELECT pg_catalog.set_config('search_path', 'public', false);

--
-- Name: application; Type: TABLE; Schema: public; Owner: csghub
--
-- Connect to casdoor management database
\connect {{ $casdoor.postgresql.name }}

-- Dynamically update application table (only if table exists)
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'application'
    ) THEN
        -- Update avatar or logo local url
        EXECUTE format('
            UPDATE
                application
            SET
                redirect_uris = ''["{{ $csghub.external_url }}/api/v1/callback/casdoor"]'',
                logo = ''{{ $casdoorEndpoint }}''||substring(logo from ''(/files/avatar/.*)'')
            WHERE
                name in (''CSGHub'',''Csgship'')
        ');

        -- Update form_side_html
        EXECUTE format('
            UPDATE
                application
            SET
                form_side_html = regexp_replace(form_side_html, ''http://\d+\.\d+\.\d+\.\d+:\d+'', ''{{ $casdoorEndpoint }}'', ''g'')
            WHERE
                name in (''CSGHub'',''Csgship'')
        ');

        -- Disable User Signup for Build-in Application
        -- Enable Select organization mode for login
        EXECUTE format('
            UPDATE
                application
            SET
                enable_sign_up = ''f'',
                org_choice_mode = ''Select''
            WHERE
                name = ''app-built-in''
        ');
    END IF;
END
$$;

-- Dynamically update organization table (only if table exists)
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'organization'
    ) THEN
        -- Update website_url, logo, favicon, default_avatar with local url
        EXECUTE format('
            UPDATE
                organization
            SET
                website_url = ''{{ $casdoorEndpoint }}'',
                logo = ''{{ $casdoorEndpoint }}''||substring(logo from ''(/files/avatar/.*)''),
                favicon = ''{{ $casdoorEndpoint }}''||substring(favicon from ''(/files/avatar/.*)''),
                default_avatar = ''{{ $casdoorEndpoint }}''||substring(default_avatar from ''(/files/avatar/.*)'')
            WHERE
                name = ''OpenCSG''
        ');
    END IF;
END
$$;

-- Dynamically update user table (only if table exists)
{{- $initPassFile := "/etc/csghub/init_root_password" -}}
{{- $pass := "" -}}
{{- if file.Exists $initPassFile -}}
  {{- $content := file.Read $initPassFile | trimSpace }}
  {{- $parts := strings.Split ":" $content }}
  {{- if gt (len $parts) 1 }}
    {{- $pass = index $parts 1 -}}
  {{- else }}
    {{- $pass = $content -}}
  {{- end }}
{{- end -}}
{{- if not $pass -}}
  {{- $pass = random.Alpha 24 -}}
  {{- file.Write $initPassFile (printf "root:%s\n" $pass) -}}
{{- end }}
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'user'
    ) THEN
        EXECUTE '
            UPDATE
                "user"
            SET
                password_type = ''bcrypt'',
                password = ''{{ $pass | crypto.Bcrypt }}''
            WHERE
                name = ''admin''
                AND password_type = ''plain''
        ';

        EXECUTE '
            UPDATE
                "user"
            SET
                avatar = ''{{ $casdoorEndpoint }}''||substring(avatar from ''(/files/avatar/.*)'')
            WHERE
                avatar ~ ''.*/files/avatar/OpenCSG/.*\.png''
        ';
    END IF;
END
$$;

-- Dynamically update provider table (only if table exists)
{{- $csgship := (datasource "config").csgship }}
{{- $oauth := $csgship.oauth }}
DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'provider'
    ) THEN
        -- Update gitlab provider
        EXECUTE '
            UPDATE
                "provider"
            SET
                client_id = ''{{ $oauth.client_id }}'',
                client_secret = ''{{ $oauth.client_secret }}'',
                custom_auth_url = ''{{ printf "%s/oauth/authorize" $oauth.issuer }}'',
                custom_token_url = ''{{ printf "%s/oauth/token" $oauth.issuer }}'',
                custom_user_info_url = ''{{ printf "%s/api/v4/user" $oauth.issuer }}''
            WHERE
                name = ''GitLab_Provider''
        ';

        -- Update custom logo
        EXECUTE '
            UPDATE
                "provider"
            SET
                custom_logo = ''{{ $casdoorEndpoint }}''||substring(custom_logo from ''(/files/avatar/.*)'')
            WHERE
                custom_logo ~ ''.*/files/avatar/OpenCSG/.*\.png''
        ';
    END IF;
END
$$;